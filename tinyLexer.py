# Generated from tiny.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,23,132,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,
        1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,
        11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,
        14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,
        16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,
        18,1,19,1,19,1,20,4,20,114,8,20,11,20,12,20,115,1,21,3,21,119,8,
        21,1,21,4,21,122,8,21,11,21,12,21,123,1,22,4,22,127,8,22,11,22,12,
        22,128,1,22,1,22,0,0,23,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,1,0,3,1,0,97,122,1,0,48,57,3,0,9,10,13,13,32,32,
        135,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,1,47,1,0,0,0,3,49,1,0,0,0,
        5,51,1,0,0,0,7,53,1,0,0,0,9,55,1,0,0,0,11,57,1,0,0,0,13,59,1,0,0,
        0,15,61,1,0,0,0,17,63,1,0,0,0,19,65,1,0,0,0,21,67,1,0,0,0,23,70,
        1,0,0,0,25,72,1,0,0,0,27,79,1,0,0,0,29,83,1,0,0,0,31,90,1,0,0,0,
        33,96,1,0,0,0,35,99,1,0,0,0,37,104,1,0,0,0,39,110,1,0,0,0,41,113,
        1,0,0,0,43,118,1,0,0,0,45,126,1,0,0,0,47,48,5,40,0,0,48,2,1,0,0,
        0,49,50,5,41,0,0,50,4,1,0,0,0,51,52,5,123,0,0,52,6,1,0,0,0,53,54,
        5,125,0,0,54,8,1,0,0,0,55,56,5,44,0,0,56,10,1,0,0,0,57,58,5,61,0,
        0,58,12,1,0,0,0,59,60,5,43,0,0,60,14,1,0,0,0,61,62,5,45,0,0,62,16,
        1,0,0,0,63,64,5,42,0,0,64,18,1,0,0,0,65,66,5,47,0,0,66,20,1,0,0,
        0,67,68,5,61,0,0,68,69,5,61,0,0,69,22,1,0,0,0,70,71,5,62,0,0,71,
        24,1,0,0,0,72,73,5,114,0,0,73,74,5,101,0,0,74,75,5,116,0,0,75,76,
        5,117,0,0,76,77,5,114,0,0,77,78,5,110,0,0,78,26,1,0,0,0,79,80,5,
        118,0,0,80,81,5,97,0,0,81,82,5,114,0,0,82,28,1,0,0,0,83,84,5,111,
        0,0,84,85,5,117,0,0,85,86,5,116,0,0,86,87,5,112,0,0,87,88,5,117,
        0,0,88,89,5,116,0,0,89,30,1,0,0,0,90,91,5,105,0,0,91,92,5,110,0,
        0,92,93,5,112,0,0,93,94,5,117,0,0,94,95,5,116,0,0,95,32,1,0,0,0,
        96,97,5,105,0,0,97,98,5,102,0,0,98,34,1,0,0,0,99,100,5,101,0,0,100,
        101,5,108,0,0,101,102,5,115,0,0,102,103,5,101,0,0,103,36,1,0,0,0,
        104,105,5,119,0,0,105,106,5,104,0,0,106,107,5,105,0,0,107,108,5,
        108,0,0,108,109,5,101,0,0,109,38,1,0,0,0,110,111,5,59,0,0,111,40,
        1,0,0,0,112,114,7,0,0,0,113,112,1,0,0,0,114,115,1,0,0,0,115,113,
        1,0,0,0,115,116,1,0,0,0,116,42,1,0,0,0,117,119,5,45,0,0,118,117,
        1,0,0,0,118,119,1,0,0,0,119,121,1,0,0,0,120,122,7,1,0,0,121,120,
        1,0,0,0,122,123,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,44,1,
        0,0,0,125,127,7,2,0,0,126,125,1,0,0,0,127,128,1,0,0,0,128,126,1,
        0,0,0,128,129,1,0,0,0,129,130,1,0,0,0,130,131,6,22,0,0,131,46,1,
        0,0,0,5,0,115,118,123,128,1,6,0,0
    ]

class tinyLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    ADD = 7
    SUB = 8
    MUL = 9
    DIV = 10
    EQ = 11
    GR = 12
    RETURN = 13
    VAR = 14
    OUTPUT = 15
    INPUT = 16
    IF = 17
    ELSE = 18
    WHILE = 19
    SEMI = 20
    ID = 21
    INT = 22
    WS = 23

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "','", "'='", "'+'", "'-'", "'*'", 
            "'/'", "'=='", "'>'", "'return'", "'var'", "'output'", "'input'", 
            "'if'", "'else'", "'while'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "ADD", "SUB", "MUL", "DIV", "EQ", "GR", "RETURN", "VAR", "OUTPUT", 
            "INPUT", "IF", "ELSE", "WHILE", "SEMI", "ID", "INT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "ADD", 
                  "SUB", "MUL", "DIV", "EQ", "GR", "RETURN", "VAR", "OUTPUT", 
                  "INPUT", "IF", "ELSE", "WHILE", "SEMI", "ID", "INT", "WS" ]

    grammarFileName = "tiny.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


